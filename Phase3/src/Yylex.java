/* The following code was generated by JFlex 1.6.0 */


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>C:/Users/pc/Documents/GitHub/CompilerDesign/Phase1/JFlexInput.txt</tt>
 */
class Yylex implements YYParser.Lexer{

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\0\1\2\1\42\1\43\1\1\22\0\1\37\2\0\1\6"+
                    "\1\0\1\35\1\0\1\0\1\51\1\52\1\33\1\31\1\54\1\32"+
                    "\1\40\1\34\1\4\11\5\1\55\1\53\1\0\1\30\1\0\1\36"+
                    "\1\0\32\3\1\45\1\0\1\46\3\0\1\17\1\22\1\12\1\14"+
                    "\1\11\1\24\1\41\1\23\1\20\1\3\1\27\1\21\1\3\1\7"+
                    "\1\13\1\3\1\44\1\10\1\15\1\16\1\26\1\3\1\25\3\3"+
                    "\1\47\1\0\1\50\7\0\1\42\u1fa2\0\1\42\1\42\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

    /**
     * Translates characters to character classes
     */
    private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\3\1\1\2\2\3\16\2\1\4\1\5\1\6"+
                    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
                    "\1\17\1\20\1\21\1\22\1\23\1\24\4\0\5\2"+
                    "\1\3\1\25\1\3\1\0\13\2\1\26\6\2\1\27"+
                    "\4\2\1\30\1\31\1\32\1\33\1\1\1\25\2\0"+
                    "\1\34\1\35\1\36\1\37\1\40\1\34\1\35\1\36"+
                    "\1\37\1\40\1\25\1\41\1\2\1\34\1\35\1\36"+
                    "\1\37\1\40\1\42\3\2\1\43\3\2\1\0\4\2"+
                    "\1\44\1\45\4\2\1\46\1\25\3\2\1\47\1\50"+
                    "\1\51\1\52\1\0\3\2\1\53\1\0\1\2\1\54"+
                    "\1\2\1\55\2\2\1\0\3\2\1\0\1\56\1\57"+
                    "\1\60\1\61\1\0\1\2\1\62\1\63\1\0\1\64"+
                    "\1\65\1\0\1\66";

    private static int [] zzUnpackAction() {
        int [] result = new int[158];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
                    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
                    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\56\0\u03c6\0\u03f4"+
                    "\0\u0422\0\u0450\0\56\0\56\0\u047e\0\56\0\56\0\56"+
                    "\0\56\0\56\0\56\0\56\0\56\0\56\0\u04ac\0\u04da"+
                    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a"+
                    "\0\u0678\0\u06a6\0\u0678\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c"+
                    "\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc"+
                    "\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0564\0\u0a10\0\u0a3e"+
                    "\0\u0a6c\0\u0a9a\0\212\0\212\0\212\0\212\0\u0ac8\0\u0af6"+
                    "\0\u0af6\0\u0b24\0\212\0\212\0\212\0\212\0\212\0\u0564"+
                    "\0\u0564\0\u0564\0\u0564\0\u0564\0\u0b52\0\u0b80\0\u0bae\0\u0bae"+
                    "\0\u0bae\0\u0bae\0\u0bae\0\u0bae\0\u0564\0\u0bdc\0\u0c0a\0\u0c38"+
                    "\0\u0564\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
                    "\0\u0da8\0\u0dd6\0\u0564\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\212"+
                    "\0\u0b80\0\u0ebc\0\u0eea\0\u0f18\0\u0564\0\u0564\0\u0564\0\u0564"+
                    "\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0564\0\u0ffe\0\u102c\0\u0564"+
                    "\0\u105a\0\u0564\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e"+
                    "\0\u119c\0\u0564\0\u0564\0\u0564\0\u0564\0\u11ca\0\u11f8\0\u0564"+
                    "\0\u0564\0\u1226\0\212\0\u0564\0\u1254\0\212";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[158];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
                    "\1\22\1\5\1\23\1\5\1\24\1\25\2\5\1\26"+
                    "\1\27\1\30\1\31\1\32\1\33\1\34\1\2\1\35"+
                    "\1\5\1\0\1\4\1\5\1\36\1\37\1\40\1\41"+
                    "\1\42\1\43\1\44\1\45\1\46\7\0\1\47\1\0"+
                    "\1\50\7\0\1\51\17\0\1\52\16\0\1\4\134\0"+
                    "\3\53\1\0\1\54\1\53\1\55\7\53\1\56\6\53"+
                    "\11\0\1\57\2\0\1\53\14\0\1\53\2\60\1\0"+
                    "\1\54\1\53\1\55\7\53\1\56\6\53\10\0\1\61"+
                    "\1\57\2\0\1\53\14\0\1\53\2\62\1\0\1\54"+
                    "\1\53\1\55\7\53\1\56\6\53\10\0\1\63\1\57"+
                    "\2\0\1\53\14\0\1\64\2\53\1\0\1\65\1\64"+
                    "\1\66\7\64\1\67\6\64\11\0\1\70\2\0\1\64"+
                    "\14\0\3\53\1\0\1\54\1\53\1\55\1\53\1\71"+
                    "\5\53\1\56\6\53\11\0\1\57\2\0\1\53\14\0"+
                    "\3\53\1\0\1\54\1\53\1\72\7\53\1\56\6\53"+
                    "\11\0\1\57\2\0\1\53\14\0\3\53\1\0\1\73"+
                    "\1\53\1\55\7\53\1\74\6\53\11\0\1\57\2\0"+
                    "\1\53\14\0\3\53\1\0\1\54\1\53\1\55\5\53"+
                    "\1\75\1\53\1\56\1\53\1\76\4\53\11\0\1\57"+
                    "\2\0\1\53\14\0\3\53\1\0\1\54\1\77\1\55"+
                    "\7\53\1\56\6\53\11\0\1\57\2\0\1\53\14\0"+
                    "\3\53\1\0\1\54\1\53\1\100\7\53\1\56\6\53"+
                    "\11\0\1\57\2\0\1\53\14\0\3\53\1\0\1\54"+
                    "\1\53\1\55\4\53\1\101\2\53\1\56\3\53\1\102"+
                    "\2\53\11\0\1\57\2\0\1\53\14\0\3\53\1\0"+
                    "\1\54\1\103\1\55\7\53\1\56\6\53\11\0\1\57"+
                    "\2\0\1\53\14\0\3\53\1\0\1\104\1\53\1\55"+
                    "\7\53\1\56\6\53\11\0\1\57\2\0\1\53\14\0"+
                    "\3\53\1\0\1\105\1\53\1\55\7\53\1\56\2\53"+
                    "\1\106\3\53\11\0\1\57\2\0\1\53\14\0\3\53"+
                    "\1\0\1\54\1\107\1\55\1\53\1\110\5\53\1\56"+
                    "\6\53\11\0\1\57\2\0\1\53\14\0\3\53\1\0"+
                    "\1\54\1\53\1\55\5\53\1\111\1\53\1\56\6\53"+
                    "\11\0\1\57\2\0\1\53\14\0\3\53\1\0\1\54"+
                    "\1\53\1\55\7\53\1\56\1\53\1\112\4\53\11\0"+
                    "\1\57\2\0\1\53\20\0\1\47\1\0\1\50\7\0"+
                    "\1\51\6\0\1\113\10\0\1\52\23\0\1\47\1\0"+
                    "\1\50\7\0\1\51\6\0\1\114\10\0\1\52\23\0"+
                    "\1\47\1\0\1\50\7\0\1\51\6\0\1\115\10\0"+
                    "\1\52\23\0\1\47\1\0\1\50\7\0\1\51\6\0"+
                    "\1\116\3\0\1\117\4\0\1\52\20\0\1\120\1\121"+
                    "\1\0\1\47\1\0\1\50\7\0\1\51\17\0\1\122"+
                    "\25\0\1\123\110\0\1\124\22\0\1\125\4\0\1\126"+
                    "\50\0\1\127\47\0\3\53\1\0\21\53\11\0\1\53"+
                    "\2\0\1\53\14\0\3\53\1\0\2\53\1\130\16\53"+
                    "\11\0\1\53\2\0\1\53\14\0\3\53\1\0\21\53"+
                    "\11\0\1\53\2\0\1\131\14\0\3\53\1\0\2\53"+
                    "\1\132\4\53\1\133\11\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\2\53\1\134\16\53\11\0\1\53"+
                    "\2\0\1\53\14\0\1\53\2\60\1\0\21\53\10\0"+
                    "\1\135\1\53\2\0\1\53\15\0\2\136\53\0\1\53"+
                    "\2\62\1\0\21\53\10\0\1\63\1\53\2\0\1\53"+
                    "\14\0\1\137\2\53\1\0\21\137\11\0\1\137\2\0"+
                    "\1\137\14\0\1\137\2\53\1\0\2\137\1\140\16\137"+
                    "\11\0\1\137\2\0\1\137\14\0\1\137\2\53\1\0"+
                    "\21\137\11\0\1\137\2\0\1\141\14\0\1\137\2\53"+
                    "\1\0\2\137\1\142\4\137\1\143\11\137\11\0\1\137"+
                    "\2\0\1\137\14\0\1\137\2\53\1\0\2\137\1\144"+
                    "\16\137\11\0\1\137\2\0\1\137\14\0\3\53\1\0"+
                    "\7\53\1\145\11\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\3\53\1\146\3\53\1\147\1\150\10\53"+
                    "\11\0\1\53\2\0\1\131\14\0\3\53\1\0\2\53"+
                    "\1\130\2\53\1\151\13\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\2\53\1\132\3\53\1\152\1\133"+
                    "\11\53\11\0\1\53\2\0\1\53\14\0\3\53\1\0"+
                    "\6\53\1\153\12\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\10\53\1\154\10\53\11\0\1\53\2\0"+
                    "\1\53\14\0\3\53\1\0\21\53\7\0\1\155\1\0"+
                    "\1\53\2\0\1\53\14\0\3\53\1\0\15\53\1\156"+
                    "\3\53\11\0\1\53\2\0\1\131\14\0\3\53\1\0"+
                    "\10\53\1\157\10\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\11\53\1\160\7\53\11\0\1\53\2\0"+
                    "\1\53\14\0\3\53\1\0\17\53\1\161\1\53\11\0"+
                    "\1\53\2\0\1\53\14\0\3\53\1\0\2\53\1\130"+
                    "\2\53\1\162\13\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\2\53\1\130\4\53\1\163\11\53\11\0"+
                    "\1\53\2\0\1\53\14\0\3\53\1\0\2\53\1\164"+
                    "\16\53\11\0\1\53\2\0\1\53\14\0\3\53\1\0"+
                    "\4\53\1\165\14\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\12\53\1\166\6\53\11\0\1\53\2\0"+
                    "\1\53\14\0\3\53\1\0\11\53\1\167\7\53\11\0"+
                    "\1\53\2\0\1\53\11\0\1\117\2\0\37\117\2\0"+
                    "\12\117\4\0\1\120\1\121\61\0\1\127\4\0\1\170"+
                    "\43\0\2\135\54\0\1\171\1\136\53\0\1\53\2\172"+
                    "\1\0\21\53\11\0\1\53\2\0\1\53\14\0\3\53"+
                    "\1\0\4\53\1\173\14\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\17\53\1\174\1\53\11\0\1\53"+
                    "\2\0\1\53\14\0\3\53\1\0\12\53\1\175\6\53"+
                    "\11\0\1\53\2\0\1\53\14\0\3\53\1\0\2\53"+
                    "\1\176\16\53\11\0\1\53\2\0\1\53\14\0\3\53"+
                    "\1\0\2\53\1\177\16\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\1\53\1\200\17\53\11\0\1\53"+
                    "\2\0\1\53\22\0\1\201\47\0\3\53\1\0\10\53"+
                    "\1\202\10\53\11\0\1\53\2\0\1\53\14\0\3\53"+
                    "\1\0\7\53\1\203\11\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\7\53\1\204\11\53\11\0\1\53"+
                    "\2\0\1\53\14\0\3\53\1\0\2\53\1\205\16\53"+
                    "\11\0\1\53\2\0\1\53\14\0\3\53\1\0\21\53"+
                    "\7\0\1\206\1\0\1\53\2\0\1\53\14\0\3\53"+
                    "\1\0\10\53\1\207\10\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\12\53\1\210\6\53\11\0\1\53"+
                    "\2\0\1\53\14\0\3\53\1\0\6\53\1\161\12\53"+
                    "\11\0\1\53\2\0\1\53\14\0\3\53\1\0\12\53"+
                    "\1\211\6\53\11\0\1\53\2\0\1\53\14\0\1\53"+
                    "\2\212\1\0\21\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\1\53\1\213\17\53\11\0\1\53\2\0"+
                    "\1\53\14\0\3\53\1\0\1\53\1\214\17\53\11\0"+
                    "\1\53\2\0\1\53\32\0\1\215\37\0\3\53\1\0"+
                    "\17\53\1\216\1\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\11\53\1\217\7\53\11\0\1\53\2\0"+
                    "\1\53\14\0\3\53\1\0\3\53\1\220\15\53\11\0"+
                    "\1\53\2\0\1\53\27\0\1\221\42\0\3\53\1\0"+
                    "\20\53\1\222\11\0\1\53\2\0\1\53\14\0\3\53"+
                    "\1\0\2\53\1\223\16\53\11\0\1\53\2\0\1\53"+
                    "\14\0\3\53\1\0\5\53\1\224\13\53\11\0\1\53"+
                    "\2\0\1\53\14\0\3\53\1\0\1\225\20\53\11\0"+
                    "\1\53\2\0\1\53\26\0\1\226\43\0\3\53\1\0"+
                    "\12\53\1\227\6\53\11\0\1\53\2\0\1\53\14\0"+
                    "\3\53\1\0\3\53\1\230\15\53\11\0\1\53\2\0"+
                    "\1\53\14\0\3\53\1\0\14\53\1\231\4\53\11\0"+
                    "\1\53\2\0\1\53\34\0\1\232\43\0\1\233\47\0"+
                    "\3\53\1\0\7\53\1\234\11\53\11\0\1\53\2\0"+
                    "\1\53\22\0\1\235\53\0\1\236\46\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[4738];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\2\1\1\11\42\1\4\0\10\1\1\0\27\1"+
                    "\4\11\2\1\2\0\5\11\25\1\1\0\12\1\1\11"+
                    "\10\1\1\0\4\1\1\0\6\1\1\0\3\1\1\0"+
                    "\4\1\1\0\3\1\1\0\1\11\1\1\1\0\1\11";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[158];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /** this buffer contains the current text to be matched and is
     the source of the yytext() string */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /** endRead marks the last character in the buffer, that has been read
     from input */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    Yylex(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed   the packed character translation table
     * @return         the unpacked character translation table
     */
    private static char [] zzUnpackCMap(String packed) {
        char [] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 170) {
            int  count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead-zzStartRead);

      /* translate stored positions */
            zzEndRead-= zzStartRead;
            zzCurrentPos-= zzStartRead;
            zzMarkedPos-= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length*2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int totalRead = 0;
        while (totalRead < requested) {
            int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
            if (numRead == -1) {
                break;
            }
            totalRead += numRead;
        }

        if (totalRead > 0) {
            zzEndRead += totalRead;
            if (totalRead == requested) { /* possibly more input available */
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            return false;
        }

        // totalRead = 0: End of stream
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     *
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead+pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     *                This number must not be greater than yylength()!
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    @Override
    public Object getLVal() {
        return null;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char [] zzBufferL = zzBuffer;
        char [] zzCMapL = ZZ_CMAP;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1:
                {
                }
                case 55: break;
                case 2:
                { return YYParser.Fake_id;
                }
                case 56: break;
                case 3:
                { return YYParser.NUMCONST;
                }
                case 57: break;
                case 4:
                { return YYParser.assignment;
                }
                case 58: break;
                case 5:
                { return YYParser.plus;
                }
                case 59: break;
                case 6:
                { return YYParser.minus;
                }
                case 60: break;
                case 7:
                { return YYParser.multiply;
                }
                case 61: break;
                case 8:
                { return YYParser.division;
                }
                case 62: break;
                case 9:
                { return YYParser.modulo;
                }
                case 63: break;
                case 10:
                { return YYParser.question_mark;
                }
                case 64: break;
                case 11:
                { return YYParser.dot;
                }
                case 65: break;
                case 12:
                { return YYParser.square_bracket_left;
                }
                case 66: break;
                case 13:
                { return YYParser.square_bracket_right;
                }
                case 67: break;
                case 14:
                { return YYParser.curly_brace_left;
                }
                case 68: break;
                case 15:
                { return YYParser.curly_brace_right;
                }
                case 69: break;
                case 16:
                { return YYParser.parenthesis_left;
                }
                case 70: break;
                case 17:
                { return YYParser.parenthesis_right;
                }
                case 71: break;
                case 18:
                {
                    return YYParser.semicolon;

                }
                case 72: break;
                case 19:
                { return YYParser.comma;
                }
                case 73: break;
                case 20:
                { return YYParser.colon;
                }
                case 74: break;
                case 21:
                { return YYParser.number_error;
                }
                case 75: break;
                case 22:
                { return YYParser.OR;
                }
                case 76: break;
                case 23:
                { return YYParser.IF;
                }
                case 77: break;
                case 24:
                { return YYParser.plus_assign;
                }
                case 78: break;
                case 25:
                { return YYParser.minus_assign;
                }
                case 79: break;
                case 26:
                { return YYParser.multiply_assign;
                }
                case 80: break;
                case 27:
                { return YYParser.divide_assign;
                }
                case 81: break;
                case 28:
                { return YYParser.not_equal;
                }
                case 82: break;
                case 29:
                { return YYParser.equal;
                }
                case 83: break;
                case 30:
                { return YYParser.less_equal;
                }
                case 84: break;
                case 31:
                { return YYParser.less_than;
                }
                case 85: break;
                case 32:
                { return YYParser.greater_equal;
                }
                case 86: break;
                case 33:
                { return YYParser.Real_const;
                }
                case 87: break;
                case 34:
                { return YYParser.NOT;
                }
                case 88: break;
                case 35:
                { return YYParser.END;
                }
                case 89: break;
                case 36:
                { return YYParser.AND;
                }
                case 90: break;
                case 37:
                { return YYParser.INT;
                }
                case 91: break;
                case 38:
                { return YYParser.greater_than;
                }
                case 92: break;
                case 39:
                { return YYParser.REAL;
                }
                case 93: break;
                case 40:
                { return YYParser.ELSE;
                }
                case 94: break;
                case 41:
                { return YYParser.CASE;
                }
                case 95: break;
                case 42:
                { return YYParser.CHAR;
                }
                case 96: break;
                case 43:
                { return YYParser.BoolConst;
                }
                case 97: break;
                case 44:
                { return YYParser.BOOL;
                }
                case 98: break;
                case 45:
                { return YYParser.ID;
                }
                case 99: break;
                case 46:
                { return YYParser.BREAK;
                }
                case 100: break;
                case 47:
                { return YYParser.WHILE;
                }
                case 101: break;
                case 48:
                { return YYParser.RECORD;
                }
                case 102: break;
                case 49:
                { return YYParser.RETURN;
                }
                case 103: break;
                case 50:
                { return YYParser.Static;
                }
                case 104: break;
                case 51:
                { return YYParser.SWITCH;
                }
                case 105: break;
                case 52:
                { return YYParser.OR_ELSE;
                }
                case 106: break;
                case 53:
                { return YYParser.DEFAULT;
                }
                case 107: break;
                case 54:
                { return YYParser.AND_THEN;
                }
                case 108: break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return Integer.parseInt(null);
                    }
                    else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

    @Override
    public void yyerror(String s) {
        System.out.println("salam");

    }


}
